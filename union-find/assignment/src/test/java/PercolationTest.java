/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

public class PercolationTest {
    @Test public void testPercolationThrowsIllegalArgumentExceptionIfEqualToZero() {
        try {
          new Percolation(0);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("n must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationThrowsIllegalArgumentExceptionIfLessThanZero() {
        try {
          new Percolation(-1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("n must be either be equal to or greater than 1"));
        }
    }


    // Open tests
    @Test public void testPercolationOpenThrowsIllegalArgumentExceptionIfRowLessThanZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.open(-1,1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("row must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationOpenThrowsIllegalArgumentExceptionIfRowEqualToZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.open(0,1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("row must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationOpenThrowsIllegalArgumentExceptionIfColLessThanZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.open(1,-1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("col must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationOpenThrowsIllegalArgumentExceptionIfColEqualToZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.open(1,0);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("col must be either be equal to or greater than 1"));
        }
    }

    // isOpen tests
    @Test public void testPercolationIsOpenThrowsIllegalArgumentExceptionIfRowLessThanZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.isOpen(-1,1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("row must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationIsOpenThrowsIllegalArgumentExceptionIfRowEqualToZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.isOpen(0,1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("row must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationIsOpenThrowsIllegalArgumentExceptionIfColLessThanZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.isOpen(1,-1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("col must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationIsOpenThrowsIllegalArgumentExceptionIfColEqualToZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.isOpen(1,0);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("col must be either be equal to or greater than 1"));
        }
    }


    // isFull tests
    @Test public void testPercolationIsFullThrowsIllegalArgumentExceptionIfRowLessThanZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.isFull(-1,1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("row must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationIsFullThrowsIllegalArgumentExceptionIfRowEqualToZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.isFull(0,1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("row must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationIsFullThrowsIllegalArgumentExceptionIfColLessThanZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.isFull(1,-1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("col must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationIsFullThrowsIllegalArgumentExceptionIfColEqualToZero() {
        Percolation appUnderTest = new Percolation(1);
        try {
          appUnderTest.isFull(1,0);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("col must be either be equal to or greater than 1"));
        }
    }
}
