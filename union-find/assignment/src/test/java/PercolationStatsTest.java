/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

public class PercolationStatsTest {

    @Test public void testPercolationStatsThrowsIllegalArgumentExceptionIfGridSizeEqualToZero() {
        try {
          new PercolationStats(0, 1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("grid size must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationStatsThrowsIllegalArgumentExceptionIfGridSizeLessThanZero() {
        try {
          new PercolationStats(-1, 1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("grid size must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationStatsThrowsIllegalArgumentExceptionIfTrialsEqualToZero() {
        try {
          new PercolationStats(1,0);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("trials must be either be equal to or greater than 1"));
        }
    }

    @Test public void testPercolationStatsThrowsIllegalArgumentExceptionIfTrialsLessThanZero() {
        try {
          new PercolationStats(1, -1);
          fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException anIllegalArgumentException) {
          assertThat(anIllegalArgumentException.getMessage(), is("trials must be either be equal to or greater than 1"));
        }
    }
}
